Parameters:
    EC2InstanceType:
Type: String
EC2AMI:
Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>' 
Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

 Resources:
  SecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
    GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'

  Resources:
  SecurityGroupIngress:
    -IPProtocol: TCP
     FromPort: 8080
     toport: 8080
     CidrIp: 0.0.0.0/0
    - Ipprotocol: tcp
      FromPort: 22
      toport: 22
      CidrIP: 0.0.0.0/0
  Tags:
    -Key: Name 
    Value: !Ref AWS::StackName

Resources:
    SecurityGroup: ...

    InstanceRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version:"2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service:
                 - "ec2.amazonaws.com"
            Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
        Tags:
          -Key: Name 
           Value:  !Ref AWS::StackName

Resources: 
    SecurityGroup: ...
    InstanceRole: ...

    InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
           Roles:
               -Ref: InstanceRole

Resources:
   SecuityGroup: ... 
   InstanceRole: ...
   InstanceProfile: ...

   Instance:
     Type: AWS::EC2::Instance 
     CreationPolicy:
       ResourcesSignal:
         Timeout: PT15M
         Count: 1
      Metadata:
        AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wget: []
              unzip: []
      Properties:
        ImageId:  !Ref EC2AMI
        InstanceType: !Ref EC2InstanceType
        IamInstanceProfile: !Ref InstanceProfile
        Monitoring: true
        securityGroupIDs:
          -!GetAtt SecurityGroup.GroupId
        UserData
          # ...
        Tags:
         -Key: Name
          Value: !Ref AWS::StackName

UserData:
    Fn::Base64: !Sub  |
      #!/bin/bash -xe 

      # send script output to /tmp so we can debug boot failures 
      exec > /tmp/userdata.log 2>&1

      # update all packages 
      yum -y update 

      # Update all packages 
      yum -y update 

      # Get latest cfn scripts;
  https://doc.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfninit
      yum install -y aws-cfn-bootstrap

      # Have CloudFormation install any files and packages from the metadata 
      /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region 
  ${AWS::Region} --resource Instance 


       cat > /tmp/install_script.sh << EOF
        # START
        echo "Setting up NodeJS Environment"
        curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh  |
  bash

        # Dot source the files to ensure that variables are available within the current shell 
        . /home/ec2-user/.nvm/nvm.sh
        . /home/ec2-user/.bahrc

        # Install NVM,NPM, Node.Js
        nvm alias default v12.7.0
        nvm install v12.7.0
        nvm use v12.7.0

        # Download latest code, unzip it into /home/ec2-user/app 
        wget https://github.com/ckeair/aws-bootstrap/archive/master.zip
        unzip master.zip 
        mv -p /home/ec2-user/app/logs

        # Run server 
        cd app
        npm install 
        npm start
      EOF

      chown ec2-user:ec2-user /tmp/install_script.sh  && chmod a+x
  /tmp/install_script.sh
       sleep 1; su - ec2-user -c "/tmp/install_script.sh"

       # Signal to CloudFormation that the instance is ready 
        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region
  ${AWS::Region} --resource Instance 
Outputs:
   InstanceEndpoint:
     Description: The DNS name for the created instance 
     Value: !Sub "http://${Instance.PublicDnsName}:8080"
     Export:
       Name: InstanceEndpoint 